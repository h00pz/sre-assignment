
---
 - name: Provision Ubuntu Box
   local_action:
     module: ec2
     key_name: "{{ aws_ssh_key_name }}"
     group_id: "['{{ postgres_sec_group }}', '{{ zabbix_sec_group }}', '{{ mgmt_sec_group']"
     instance_type: "{{ ec2_instance_type }}"
     image: "{{ ec2_image }}"
     vpc_subnet_id: "{{  }}"
     region: "{{ aws_region }}"
     instance_tags: '{"Name":"{{postgres_instance_tag}}","Type":"{{postgres_instance_tag}}","Environment":"{{instance_env}}"}'
     assign_public_ip: yes
     wait: true
     count: 1
     volumes: 
     - device_name: /dev/sda1
       device_type: "{{ instance_storage }}"
       volume_size: "{{ instance_vol_size }}"
       delete_on_termination: true
   register: postgres_instance

 - debug: var=item
   with_items: "{{ postgres_instance.instances }}"

 - add_host: name={{ item.public_ip }} >
             groups=tag_Type_{{postgres_instance_tag}},tag_Environment_{{instance_env}}
             ec2_region={{aws_region}} 
             ec2_tag_Name={{postgres_instance_tag}}
             ec2_tag_Type={{postgres_instance_tag}}
             ec2_tag_Environment={{instance_env}}
             ec2_ip_address={{item.public_ip}}
   with_items: "{{ postgres_instance.instances }}"

 - name: Wait for the instances to boot by checking the ssh port
   wait_for: host={{item.public_ip}} port=22 delay=60 timeout=320 state=started
   with_items: "{{ postgres_instance.instances }}"

  - name: ensure apt cache is up to date
    become: yes
    apt: update_cache=yes
    when: inventory_hostname in groups['postgres']

  - name: ensure packages are installed
    apt: name={{item}}
    become: yes
    with_items:
        - postgresql
        - libpq-dev
        - python-psycopg2
    when: inventory_hostname in groups['postgres']

#  - name: ensure database is created
#    become: yes
#    become_user: postgres
#    postgresql_db: name={{dbname}}
#    when: inventory_hostname in groups['postgres']
#
#  - name: ensure user has access to database
#    become: yes
#    become_user: postgres
#    postgresql_user: db={{dbname}} name={{dbuser}} password={{dbpassword}} priv=ALL
#    when: inventory_hostname in groups['postgres']
#
#  - name: ensure user does not have unnecessary privilege
#    become: yes
#    become_user: postgres
#    postgresql_user: name={{dbuser}} role_attr_flags=NOSUPERUSER,NOCREATEDB
#  
#  - name: ensure no other user can access the database

